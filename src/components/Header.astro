---
import ThemeToggle from "./ThemeToggle.astro";

const navItems = [
  {
    title: "Inicio",
    label: "inicio",
    url: "/#inicio",
  },
  {
    title: "Proceso",
    label: "proceso",
    url: "/#proceso",
  },
  {
    title: "Arquitectura",
    label: "arquitectura",
    url: "/#arquitectura",
  },
  {
    title: "Modelos",
    label: "modelos-ia",
    url: "/#modelos-ia",
  },
  {
    title: "Visualizador",
    label: "visualizador",
    url: "/#visualizador",
  },
  {
    title: "Resultados",
    label: "resultados",
    url: "/#resultados",
  },
  {
    title: "Instalación",
    label: "instalacion",
    url: "/#instalacion",
  },
];
---

<!-- Menú Desktop -->
<header
  class="fixed top-0 z-10 items-center justify-center mx-auto mt-2 hidden md:block left-1/2 transform -translate-x-1/2 w-auto"
>
  <nav
    class="flex flex-wrap md:flex-nowrap px-3 text-sm font-medium rounded-full text-gray-600 dark:text-gray-200 justify-center items-center gap-x-4"
  >
    {
      navItems.map((link) => (
        <a
          class="relative block px-2 py-2 transition hover:text-yellow-500 dark:hover:text-yellow-400"
          aria-label={link.label}
          href={link.url}
        >
          {link.title}
        </a>
      ))
    }
  </nav>
</header>

<!-- Menú Mobile -->
<header
  class="fixed top-0 z-10 ml-2 md:hidden mt-2 w-auto"
>
  <div class="relative ">
    <nav
      class="flex items-center justify-between px-3 py-2 text-sm font-medium rounded-full text-gray-600 dark:text-gray-200 bg-white/50 dark:bg-gray-800/90 backdrop-blur"
    >
      <!-- Botón Toggle -->
      <button
        onclick="mostrarMenu()"
        id="mobile-menu-button"
        class="p-2 hover:text-yellow-500 focus:outline-none"
        aria-label="Toggle menu"
      >
        <svg
          class="w-6 h-6"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
      </button>
    </nav>

    <!-- Menú Desplegable -->
    <div
      id="mobile-menu"
      class="hidden absolute w-auto mt-2 py-2 bg-gray-100 bg-opacity-95 dark:bg-gray-800 dark:bg-opacity-95 rounded-lg shadow-xl ring-1 ring-gray-200 dark:ring-gray-700"
    >
      {
        navItems.map((link) => (
          <a
            class="block px-4 py-2 transition hover:text-yellow-500 dark:hover:text-yellow-400"
            aria-label={link.label}
            href={link.url}
          >
            {link.title}
          </a>
        ))
      }
    </div>
  </div>
</header>

<div class="fixed top-0 right-0 z-10 mt-2 mr-2">
  <nav
    class="flex items-center justify-center px-3 py-2 text-sm font-medium rounded-full text-gray-600 dark:text-gray-200 bg-white/50 dark:bg-gray-800/90 backdrop-blur"
  >
    <ThemeToggle />
  </nav>
</div>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const sections = document.querySelectorAll("section");
    const navItems = document.querySelectorAll("header nav a");
    const mobileMenuButton = document.getElementById("mobile-menu-button");
    const mobileMenu = document.getElementById("mobile-menu");
    const activeItem = document.getElementById("active-item");

    // Toggle menú mobile
    mobileMenuButton?.addEventListener("click", (event) => {
      event.stopPropagation(); // Prevenir que el click se propague
      if (mobileMenu) {
        mobileMenu.classList.toggle("hidden");
      }
    });

    // Manejar clicks en los links del menú móvil
    mobileMenu?.querySelectorAll("a").forEach((link) => {
      link.addEventListener("click", () => {
        mobileMenu.classList.add("hidden");
      });
    });

    // Cerrar menú al hacer click fuera
    document.addEventListener("click", (event) => {
      if (mobileMenu && !mobileMenu.classList.contains("hidden")) {
        const isClickInside =
          mobileMenuButton?.contains(event.target as Node) ||
          mobileMenu?.contains(event.target as Node);

        if (!isClickInside) {
          mobileMenu.classList.add("hidden");
        }
      }
    });

    const callback = (entries: any[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          // Actualizar navegación desktop y móvil
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.classList.add("text-yellow-500");
              // Actualizar elemento activo en mobile
              if (activeItem) {
                activeItem.textContent = item.textContent;
              }
            } else {
              item.classList.remove("text-yellow-500");
            }
          });
        }
      });
    };

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    });

    sections.forEach((section) => {
      observer.observe(section);
    });

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect();
      } else {
        sections.forEach((section) => {
          observer.observe(section);
        });
      }
    };
  });

  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section");
    const navItems = document.querySelectorAll("header nav a");
    const mobileMenuButton = document.getElementById("mobile-menu-button");
    const mobileMenu = document.getElementById("mobile-menu");
    const activeItem = document.getElementById("active-item");

    // Toggle menú mobile
    mobileMenuButton?.addEventListener("click", (event) => {
      event.stopPropagation(); // Prevenir que el click se propague
      if (mobileMenu) {
        mobileMenu.classList.toggle("hidden");
      }
    });

    // Manejar clicks en los links del menú móvil
    mobileMenu?.querySelectorAll("a").forEach((link) => {
      link.addEventListener("click", () => {
        mobileMenu.classList.add("hidden");
      });
    });

    // Cerrar menú al hacer click fuera
    document.addEventListener("click", (event) => {
      if (mobileMenu && !mobileMenu.classList.contains("hidden")) {
        const isClickInside =
          mobileMenuButton?.contains(event.target as Node) ||
          mobileMenu?.contains(event.target as Node);

        if (!isClickInside) {
          mobileMenu.classList.add("hidden");
        }
      }
    });

    const callback = (entries: any[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          // Actualizar navegación desktop y móvil
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.classList.add("text-yellow-500");
              // Actualizar elemento activo en mobile
              if (activeItem) {
                activeItem.textContent = item.textContent;
              }
            } else {
              item.classList.remove("text-yellow-500");
            }
          });
        }
      });
    };

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    });

    sections.forEach((section) => {
      observer.observe(section);
    });

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect();
      } else {
        sections.forEach((section) => {
          observer.observe(section);
        });
      }
    };
  });
</script>

<style>
  nav {
    animation: nav-shadown 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
  }

  @keyframes nav-shadown {
    to {
      @apply shadow-lg ring-1 backdrop-blur dark:bg-gray-800/90 bg-white/50 ring-white/10;
    }
  }

  /* Estilos para el menú mobile */
  #mobile-menu {
    transition: all 0.2s ease-in-out;
  }

  #mobile-menu.hidden {
    opacity: 0;
    transform: translateY(-10px);
    pointer-events: none;
  }

  #mobile-menu:not(.hidden) {
    opacity: 1;
    transform: translateY(0);
    pointer-events: auto;
  }
</style>
